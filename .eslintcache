[{"C:\\Users\\Robby\\Documents\\Coding\\stardew-tracker\\src\\index.js":"1","C:\\Users\\Robby\\Documents\\Coding\\stardew-tracker\\src\\App.js":"2","C:\\Users\\Robby\\Documents\\Coding\\stardew-tracker\\src\\components\\communityCenter.js":"3","C:\\Users\\Robby\\Documents\\Coding\\stardew-tracker\\src\\components\\bundle.js":"4","C:\\Users\\Robby\\Documents\\Coding\\stardew-tracker\\src\\Main.js":"5"},{"size":195,"mtime":1607216670158,"results":"6","hashOfConfig":"7"},{"size":295,"mtime":1607360700898,"results":"8","hashOfConfig":"7"},{"size":3643,"mtime":1607377299233,"results":"9","hashOfConfig":"7"},{"size":3138,"mtime":1607377299236,"results":"10","hashOfConfig":"7"},{"size":715,"mtime":1607318440064,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1qhoerv",{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Robby\\Documents\\Coding\\stardew-tracker\\src\\index.js",[],"C:\\Users\\Robby\\Documents\\Coding\\stardew-tracker\\src\\App.js",[],"C:\\Users\\Robby\\Documents\\Coding\\stardew-tracker\\src\\components\\communityCenter.js",[],"C:\\Users\\Robby\\Documents\\Coding\\stardew-tracker\\src\\components\\bundle.js",["23","24"],"import React, {useState} from \"react\";\r\nimport { Table, Col, Container, Form } from \"react-bootstrap\";\r\nconst { ipcRenderer } = window.require('electron');\r\n\r\nexport const Bundle = (props) => {\r\n\r\n    let itemData = require('../itemData.json');\r\n\r\n    let imageName = require(`../images/${itemData[props.bundle].img}.png`);\r\n\r\n    const [itemState, setItemState] = useState([]);\r\n\r\n    const handleClick = (bundle, itemIdx) => {\r\n        ipcRenderer.send('data', bundle, itemIdx);\r\n        let tmp = itemState;\r\n        tmp[itemIdx] = !itemState[itemIdx];\r\n        setItemState(tmp);\r\n    }\r\n\r\n    const handleItemState = async (bundle, itemIdx) => {\r\n        let val = await ipcRenderer.invoke('get', bundle, itemIdx);\r\n        let tmp = itemState;\r\n        tmp[itemIdx] = val;\r\n        setItemState(tmp);\r\n    }\r\n\r\n    return (\r\n        <Container style={{ padding: \"2%\" }}>\r\n            <Col sm={{ size: 10 }}>\r\n                <div style={{marginBottom: '0px'}}>\r\n                    <img src={imageName.default} style={{display: 'inline-block', verticalAlign: 'bottom', width: '40px', height: 'auto'}}/>\r\n                    <p style={{display: 'inline-block', fontWeight: 'bold', fontSize: '18px', margin: '0'}}>&nbsp;{props.name} (Need {itemData[props.bundle].count})</p>\r\n                </div>\r\n                <Table bordered hover striped size=\"sm\" variant=\"dark\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th style={{width: '5%', textAlign: 'center'}}>&#10003;</th>\r\n                            <th style={{width: '15%'}}>Item</th>\r\n                            <th>Source</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                    {\r\n                        itemData[props.bundle] ? itemData[props.bundle].items.map((item, i) => {\r\n                            handleItemState(props.bundle, i);\r\n                            return (\r\n                                <tr key={i}>\r\n                                    <th style={{width: '5%', textAlign: 'center'}}>\r\n                                        <Form.Check type=\"checkbox\" onClick={() => {handleClick(props.bundle, i)}} defaultChecked={itemState[i]}/>\r\n                                    </th>\r\n                                    <th style={{width: '15%'}}>{item.name}</th>\r\n                                    <th>{item.source}</th>\r\n                                </tr>\r\n                            )\r\n                        }) :\r\n                        <tr>\r\n                            <th style={{width: '5%'}}>{\"\"}</th>\r\n                            <th style={{width: '15%'}}>{\"\"}</th>\r\n                            <th>{\"\"}</th>\r\n                        </tr>\r\n                    }\r\n                        <tr>\r\n                            <th style={{width: '5%'}}></th>\r\n                            <th style={{width: '15%'}}>Reward</th>\r\n                            <th>{itemData[props.bundle].reward}</th>\r\n                        </tr>\r\n                    </tbody>\r\n                </Table>\r\n            </Col>\r\n        </Container>\r\n    );\r\n};","C:\\Users\\Robby\\Documents\\Coding\\stardew-tracker\\src\\Main.js",["25"],{"ruleId":"26","severity":1,"message":"27","line":1,"column":26,"nodeType":"28","messageId":"29","endLine":1,"endColumn":35},{"ruleId":"30","severity":1,"message":"31","line":31,"column":21,"nodeType":"32","endLine":31,"endColumn":141},{"ruleId":"26","severity":1,"message":"33","line":3,"column":7,"nodeType":"28","messageId":"29","endLine":3,"endColumn":11},"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'path' is assigned a value but never used."]